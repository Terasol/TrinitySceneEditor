// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Titan.FileSystem
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EmptyTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static EmptyTable GetRootAsEmptyTable(ByteBuffer _bb) { return GetRootAsEmptyTable(_bb, new EmptyTable()); }
  public static EmptyTable GetRootAsEmptyTable(ByteBuffer _bb, EmptyTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EmptyTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartEmptyTable(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<Titan.FileSystem.EmptyTable> EndEmptyTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.FileSystem.EmptyTable>(o);
  }
  public EmptyTableT UnPack() {
    var _o = new EmptyTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EmptyTableT _o) {
  }
  public static Offset<Titan.FileSystem.EmptyTable> Pack(FlatBufferBuilder builder, EmptyTableT _o) {
    if (_o == null) return default(Offset<Titan.FileSystem.EmptyTable>);
    StartEmptyTable(builder);
    return EndEmptyTable(builder);
  }
}

public class EmptyTableT
{

  public EmptyTableT() {
  }
}

public struct FileInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static FileInfo GetRootAsFileInfo(ByteBuffer _bb) { return GetRootAsFileInfo(_bb, new FileInfo()); }
  public static FileInfo GetRootAsFileInfo(ByteBuffer _bb, FileInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FileInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong PackIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public Titan.FileSystem.EmptyTable? Unk1 { get { int o = __p.__offset(6); return o != 0 ? (Titan.FileSystem.EmptyTable?)(new Titan.FileSystem.EmptyTable()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Titan.FileSystem.FileInfo> CreateFileInfo(FlatBufferBuilder builder,
      ulong pack_index = 0,
      Offset<Titan.FileSystem.EmptyTable> unk_1Offset = default(Offset<Titan.FileSystem.EmptyTable>)) {
    builder.StartTable(2);
    FileInfo.AddPackIndex(builder, pack_index);
    FileInfo.AddUnk1(builder, unk_1Offset);
    return FileInfo.EndFileInfo(builder);
  }

  public static void StartFileInfo(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPackIndex(FlatBufferBuilder builder, ulong packIndex) { builder.AddUlong(0, packIndex, 0); }
  public static void AddUnk1(FlatBufferBuilder builder, Offset<Titan.FileSystem.EmptyTable> unk1Offset) { builder.AddOffset(1, unk1Offset.Value, 0); }
  public static Offset<Titan.FileSystem.FileInfo> EndFileInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.FileSystem.FileInfo>(o);
  }
  public FileInfoT UnPack() {
    var _o = new FileInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FileInfoT _o) {
    _o.PackIndex = this.PackIndex;
    _o.Unk1 = this.Unk1.HasValue ? this.Unk1.Value.UnPack() : null;
  }
  public static Offset<Titan.FileSystem.FileInfo> Pack(FlatBufferBuilder builder, FileInfoT _o) {
    if (_o == null) return default(Offset<Titan.FileSystem.FileInfo>);
    var _unk_1 = _o.Unk1 == null ? default(Offset<Titan.FileSystem.EmptyTable>) : Titan.FileSystem.EmptyTable.Pack(builder, _o.Unk1);
    return CreateFileInfo(
      builder,
      _o.PackIndex,
      _unk_1);
  }
}

public class FileInfoT
{
  public ulong PackIndex { get; set; }
  public Titan.FileSystem.EmptyTableT Unk1 { get; set; }

  public FileInfoT() {
    this.PackIndex = 0;
    this.Unk1 = null;
  }
}

public struct Packinfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static Packinfo GetRootAsPackinfo(ByteBuffer _bb) { return GetRootAsPackinfo(_bb, new Packinfo()); }
  public static Packinfo GetRootAsPackinfo(ByteBuffer _bb, Packinfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Packinfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong FileSize { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong FileCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<Titan.FileSystem.Packinfo> CreatePackinfo(FlatBufferBuilder builder,
      ulong file_size = 0,
      ulong file_count = 0) {
    builder.StartTable(2);
    Packinfo.AddFileCount(builder, file_count);
    Packinfo.AddFileSize(builder, file_size);
    return Packinfo.EndPackinfo(builder);
  }

  public static void StartPackinfo(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFileSize(FlatBufferBuilder builder, ulong fileSize) { builder.AddUlong(0, fileSize, 0); }
  public static void AddFileCount(FlatBufferBuilder builder, ulong fileCount) { builder.AddUlong(1, fileCount, 0); }
  public static Offset<Titan.FileSystem.Packinfo> EndPackinfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.FileSystem.Packinfo>(o);
  }
  public PackinfoT UnPack() {
    var _o = new PackinfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PackinfoT _o) {
    _o.FileSize = this.FileSize;
    _o.FileCount = this.FileCount;
  }
  public static Offset<Titan.FileSystem.Packinfo> Pack(FlatBufferBuilder builder, PackinfoT _o) {
    if (_o == null) return default(Offset<Titan.FileSystem.Packinfo>);
    return CreatePackinfo(
      builder,
      _o.FileSize,
      _o.FileCount);
  }
}

public class PackinfoT
{
  public ulong FileSize { get; set; }
  public ulong FileCount { get; set; }

  public PackinfoT() {
    this.FileSize = 0;
    this.FileCount = 0;
  }
}

public struct TRPFD : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static TRPFD GetRootAsTRPFD(ByteBuffer _bb) { return GetRootAsTRPFD(_bb, new TRPFD()); }
  public static TRPFD GetRootAsTRPFD(ByteBuffer _bb, TRPFD obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TRPFD __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong FileHashes(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
  public int FileHashesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetFileHashesBytes() { return __p.__vector_as_span<ulong>(4, 8); }
#else
  public ArraySegment<byte>? GetFileHashesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ulong[] GetFileHashesArray() { return __p.__vector_as_array<ulong>(4); }
  public string PackStrings(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PackStringsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Titan.FileSystem.FileInfo? Files(int j) { int o = __p.__offset(8); return o != 0 ? (Titan.FileSystem.FileInfo?)(new Titan.FileSystem.FileInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FilesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Titan.FileSystem.Packinfo? Packs(int j) { int o = __p.__offset(10); return o != 0 ? (Titan.FileSystem.Packinfo?)(new Titan.FileSystem.Packinfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PacksLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Titan.FileSystem.TRPFD> CreateTRPFD(FlatBufferBuilder builder,
      VectorOffset file_hashesOffset = default(VectorOffset),
      VectorOffset pack_stringsOffset = default(VectorOffset),
      VectorOffset filesOffset = default(VectorOffset),
      VectorOffset packsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    TRPFD.AddPacks(builder, packsOffset);
    TRPFD.AddFiles(builder, filesOffset);
    TRPFD.AddPackStrings(builder, pack_stringsOffset);
    TRPFD.AddFileHashes(builder, file_hashesOffset);
    return TRPFD.EndTRPFD(builder);
  }

  public static void StartTRPFD(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddFileHashes(FlatBufferBuilder builder, VectorOffset fileHashesOffset) { builder.AddOffset(0, fileHashesOffset.Value, 0); }
  public static VectorOffset CreateFileHashesVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFileHashesVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFileHashesVectorBlock(FlatBufferBuilder builder, ArraySegment<ulong> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFileHashesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<ulong>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFileHashesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddPackStrings(FlatBufferBuilder builder, VectorOffset packStringsOffset) { builder.AddOffset(1, packStringsOffset.Value, 0); }
  public static VectorOffset CreatePackStringsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePackStringsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePackStringsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePackStringsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPackStringsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFiles(FlatBufferBuilder builder, VectorOffset filesOffset) { builder.AddOffset(2, filesOffset.Value, 0); }
  public static VectorOffset CreateFilesVector(FlatBufferBuilder builder, Offset<Titan.FileSystem.FileInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFilesVectorBlock(FlatBufferBuilder builder, Offset<Titan.FileSystem.FileInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFilesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Titan.FileSystem.FileInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFilesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Titan.FileSystem.FileInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPacks(FlatBufferBuilder builder, VectorOffset packsOffset) { builder.AddOffset(3, packsOffset.Value, 0); }
  public static VectorOffset CreatePacksVector(FlatBufferBuilder builder, Offset<Titan.FileSystem.Packinfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePacksVectorBlock(FlatBufferBuilder builder, Offset<Titan.FileSystem.Packinfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePacksVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Titan.FileSystem.Packinfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePacksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Titan.FileSystem.Packinfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPacksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Titan.FileSystem.TRPFD> EndTRPFD(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.FileSystem.TRPFD>(o);
  }
  public static void FinishTRPFDBuffer(FlatBufferBuilder builder, Offset<Titan.FileSystem.TRPFD> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTRPFDBuffer(FlatBufferBuilder builder, Offset<Titan.FileSystem.TRPFD> offset) { builder.FinishSizePrefixed(offset.Value); }
  public TRPFDT UnPack() {
    var _o = new TRPFDT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TRPFDT _o) {
    _o.FileHashes = new List<ulong>();
    for (var _j = 0; _j < this.FileHashesLength; ++_j) {_o.FileHashes.Add(this.FileHashes(_j));}
    _o.PackStrings = new List<string>();
    for (var _j = 0; _j < this.PackStringsLength; ++_j) {_o.PackStrings.Add(this.PackStrings(_j));}
    _o.Files = new List<Titan.FileSystem.FileInfoT>();
    for (var _j = 0; _j < this.FilesLength; ++_j) {_o.Files.Add(this.Files(_j).HasValue ? this.Files(_j).Value.UnPack() : null);}
    _o.Packs = new List<Titan.FileSystem.PackinfoT>();
    for (var _j = 0; _j < this.PacksLength; ++_j) {_o.Packs.Add(this.Packs(_j).HasValue ? this.Packs(_j).Value.UnPack() : null);}
  }
  public static Offset<Titan.FileSystem.TRPFD> Pack(FlatBufferBuilder builder, TRPFDT _o) {
    if (_o == null) return default(Offset<Titan.FileSystem.TRPFD>);
    var _file_hashes = default(VectorOffset);
    if (_o.FileHashes != null) {
      var __file_hashes = _o.FileHashes.ToArray();
      _file_hashes = CreateFileHashesVector(builder, __file_hashes);
    }
    var _pack_strings = default(VectorOffset);
    if (_o.PackStrings != null) {
      var __pack_strings = new StringOffset[_o.PackStrings.Count];
      for (var _j = 0; _j < __pack_strings.Length; ++_j) { __pack_strings[_j] = builder.CreateString(_o.PackStrings[_j]); }
      _pack_strings = CreatePackStringsVector(builder, __pack_strings);
    }
    var _files = default(VectorOffset);
    if (_o.Files != null) {
      var __files = new Offset<Titan.FileSystem.FileInfo>[_o.Files.Count];
      for (var _j = 0; _j < __files.Length; ++_j) { __files[_j] = Titan.FileSystem.FileInfo.Pack(builder, _o.Files[_j]); }
      _files = CreateFilesVector(builder, __files);
    }
    var _packs = default(VectorOffset);
    if (_o.Packs != null) {
      var __packs = new Offset<Titan.FileSystem.Packinfo>[_o.Packs.Count];
      for (var _j = 0; _j < __packs.Length; ++_j) { __packs[_j] = Titan.FileSystem.Packinfo.Pack(builder, _o.Packs[_j]); }
      _packs = CreatePacksVector(builder, __packs);
    }
    return CreateTRPFD(
      builder,
      _file_hashes,
      _pack_strings,
      _files,
      _packs);
  }
}

public class TRPFDT
{
  public List<ulong> FileHashes { get; set; }
  public List<string> PackStrings { get; set; }
  public List<Titan.FileSystem.FileInfoT> Files { get; set; }
  public List<Titan.FileSystem.PackinfoT> Packs { get; set; }

  public TRPFDT() {
    this.FileHashes = null;
    this.PackStrings = null;
    this.Files = null;
    this.Packs = null;
  }
  public static TRPFDT DeserializeFromBinary(byte[] fbBuffer) {
    return TRPFD.GetRootAsTRPFD(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TRPFD.FinishTRPFDBuffer(fbb, TRPFD.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
