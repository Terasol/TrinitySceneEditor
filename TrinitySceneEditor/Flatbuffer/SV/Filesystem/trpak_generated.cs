// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Titan.FileSystem
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public enum EncryptType : sbyte
{
  None = -1,
  Zlib = 1,
  Lz4 = 2,
  Oodle = 3,
};

public struct FileEntry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static FileEntry GetRootAsFileEntry(ByteBuffer _bb) { return GetRootAsFileEntry(_bb, new FileEntry()); }
  public static FileEntry GetRootAsFileEntry(ByteBuffer _bb, FileEntry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FileEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Res0 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Titan.FileSystem.EncryptType EncryptType { get { int o = __p.__offset(6); return o != 0 ? (Titan.FileSystem.EncryptType)__p.bb.GetSbyte(o + __p.bb_pos) : Titan.FileSystem.EncryptType.None; } }
  public byte Unk2 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ulong FileSize { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public byte FileByteBuffer(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int FileByteBufferLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileByteBufferBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetFileByteBufferBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetFileByteBufferArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<Titan.FileSystem.FileEntry> CreateFileEntry(FlatBufferBuilder builder,
      uint res_0 = 0,
      Titan.FileSystem.EncryptType encrypt_type = Titan.FileSystem.EncryptType.None,
      byte unk_2 = 0,
      ulong file_size = 0,
      VectorOffset file_byte_bufferOffset = default(VectorOffset)) {
    builder.StartTable(5);
    FileEntry.AddFileSize(builder, file_size);
    FileEntry.AddFileByteBuffer(builder, file_byte_bufferOffset);
    FileEntry.AddRes0(builder, res_0);
    FileEntry.AddUnk2(builder, unk_2);
    FileEntry.AddEncryptType(builder, encrypt_type);
    return FileEntry.EndFileEntry(builder);
  }

  public static void StartFileEntry(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddRes0(FlatBufferBuilder builder, uint res0) { builder.AddUint(0, res0, 0); }
  public static void AddEncryptType(FlatBufferBuilder builder, Titan.FileSystem.EncryptType encryptType) { builder.AddSbyte(1, (sbyte)encryptType, -1); }
  public static void AddUnk2(FlatBufferBuilder builder, byte unk2) { builder.AddByte(2, unk2, 0); }
  public static void AddFileSize(FlatBufferBuilder builder, ulong fileSize) { builder.AddUlong(3, fileSize, 0); }
  public static void AddFileByteBuffer(FlatBufferBuilder builder, VectorOffset fileByteBufferOffset) { builder.AddOffset(4, fileByteBufferOffset.Value, 0); }
  public static VectorOffset CreateFileByteBufferVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFileByteBufferVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFileByteBufferVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFileByteBufferVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFileByteBufferVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Titan.FileSystem.FileEntry> EndFileEntry(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.FileSystem.FileEntry>(o);
  }
  public FileEntryT UnPack() {
    var _o = new FileEntryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FileEntryT _o) {
    _o.Res0 = this.Res0;
    _o.EncryptType = this.EncryptType;
    _o.Unk2 = this.Unk2;
    _o.FileSize = this.FileSize;
    _o.FileByteBuffer = new List<byte>();
    for (var _j = 0; _j < this.FileByteBufferLength; ++_j) {_o.FileByteBuffer.Add(this.FileByteBuffer(_j));}
  }
  public static Offset<Titan.FileSystem.FileEntry> Pack(FlatBufferBuilder builder, FileEntryT _o) {
    if (_o == null) return default(Offset<Titan.FileSystem.FileEntry>);
    var _file_byte_buffer = default(VectorOffset);
    if (_o.FileByteBuffer != null) {
      var __file_byte_buffer = _o.FileByteBuffer.ToArray();
      _file_byte_buffer = CreateFileByteBufferVector(builder, __file_byte_buffer);
    }
    return CreateFileEntry(
      builder,
      _o.Res0,
      _o.EncryptType,
      _o.Unk2,
      _o.FileSize,
      _file_byte_buffer);
  }
}

public class FileEntryT
{
  public uint Res0 { get; set; }
  public Titan.FileSystem.EncryptType EncryptType { get; set; }
  public byte Unk2 { get; set; }
  public ulong FileSize { get; set; }
  public List<byte> FileByteBuffer { get; set; }

  public FileEntryT() {
    this.Res0 = 0;
    this.EncryptType = Titan.FileSystem.EncryptType.None;
    this.Unk2 = 0;
    this.FileSize = 0;
    this.FileByteBuffer = null;
  }
}

public struct TRPAK : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static TRPAK GetRootAsTRPAK(ByteBuffer _bb) { return GetRootAsTRPAK(_bb, new TRPAK()); }
  public static TRPAK GetRootAsTRPAK(ByteBuffer _bb, TRPAK obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TRPAK __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong FileHashes(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
  public int FileHashesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetFileHashesBytes() { return __p.__vector_as_span<ulong>(4, 8); }
#else
  public ArraySegment<byte>? GetFileHashesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ulong[] GetFileHashesArray() { return __p.__vector_as_array<ulong>(4); }
  public Titan.FileSystem.FileEntry? FileEntry(int j) { int o = __p.__offset(6); return o != 0 ? (Titan.FileSystem.FileEntry?)(new Titan.FileSystem.FileEntry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FileEntryLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Titan.FileSystem.TRPAK> CreateTRPAK(FlatBufferBuilder builder,
      VectorOffset file_hashesOffset = default(VectorOffset),
      VectorOffset file_entryOffset = default(VectorOffset)) {
    builder.StartTable(2);
    TRPAK.AddFileEntry(builder, file_entryOffset);
    TRPAK.AddFileHashes(builder, file_hashesOffset);
    return TRPAK.EndTRPAK(builder);
  }

  public static void StartTRPAK(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFileHashes(FlatBufferBuilder builder, VectorOffset fileHashesOffset) { builder.AddOffset(0, fileHashesOffset.Value, 0); }
  public static VectorOffset CreateFileHashesVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFileHashesVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFileHashesVectorBlock(FlatBufferBuilder builder, ArraySegment<ulong> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFileHashesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<ulong>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFileHashesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddFileEntry(FlatBufferBuilder builder, VectorOffset fileEntryOffset) { builder.AddOffset(1, fileEntryOffset.Value, 0); }
  public static VectorOffset CreateFileEntryVector(FlatBufferBuilder builder, Offset<Titan.FileSystem.FileEntry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFileEntryVectorBlock(FlatBufferBuilder builder, Offset<Titan.FileSystem.FileEntry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFileEntryVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Titan.FileSystem.FileEntry>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFileEntryVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Titan.FileSystem.FileEntry>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFileEntryVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Titan.FileSystem.TRPAK> EndTRPAK(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.FileSystem.TRPAK>(o);
  }
  public static void FinishTRPAKBuffer(FlatBufferBuilder builder, Offset<Titan.FileSystem.TRPAK> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTRPAKBuffer(FlatBufferBuilder builder, Offset<Titan.FileSystem.TRPAK> offset) { builder.FinishSizePrefixed(offset.Value); }
  public TRPAKT UnPack() {
    var _o = new TRPAKT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TRPAKT _o) {
    _o.FileHashes = new List<ulong>();
    for (var _j = 0; _j < this.FileHashesLength; ++_j) {_o.FileHashes.Add(this.FileHashes(_j));}
    _o.FileEntry = new List<Titan.FileSystem.FileEntryT>();
    for (var _j = 0; _j < this.FileEntryLength; ++_j) {_o.FileEntry.Add(this.FileEntry(_j).HasValue ? this.FileEntry(_j).Value.UnPack() : null);}
  }
  public static Offset<Titan.FileSystem.TRPAK> Pack(FlatBufferBuilder builder, TRPAKT _o) {
    if (_o == null) return default(Offset<Titan.FileSystem.TRPAK>);
    var _file_hashes = default(VectorOffset);
    if (_o.FileHashes != null) {
      var __file_hashes = _o.FileHashes.ToArray();
      _file_hashes = CreateFileHashesVector(builder, __file_hashes);
    }
    var _file_entry = default(VectorOffset);
    if (_o.FileEntry != null) {
      var __file_entry = new Offset<Titan.FileSystem.FileEntry>[_o.FileEntry.Count];
      for (var _j = 0; _j < __file_entry.Length; ++_j) { __file_entry[_j] = Titan.FileSystem.FileEntry.Pack(builder, _o.FileEntry[_j]); }
      _file_entry = CreateFileEntryVector(builder, __file_entry);
    }
    return CreateTRPAK(
      builder,
      _file_hashes,
      _file_entry);
  }
}

public class TRPAKT
{
  public List<ulong> FileHashes { get; set; }
  public List<Titan.FileSystem.FileEntryT> FileEntry { get; set; }

  public TRPAKT() {
    this.FileHashes = null;
    this.FileEntry = null;
  }
  public static TRPAKT DeserializeFromBinary(byte[] fbBuffer) {
    return TRPAK.GetRootAsTRPAK(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TRPAK.FinishTRPAKBuffer(fbb, TRPAK.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
