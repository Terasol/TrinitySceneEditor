// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Titan.TrinityScene
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct trinity_CompoundPencilShape : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static trinity_CompoundPencilShape GetRootAstrinity_CompoundPencilShape(ByteBuffer _bb) { return GetRootAstrinity_CompoundPencilShape(_bb, new trinity_CompoundPencilShape()); }
  public static trinity_CompoundPencilShape GetRootAstrinity_CompoundPencilShape(ByteBuffer _bb, trinity_CompoundPencilShape obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public trinity_CompoundPencilShape __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public Vec3f? Unk0 { get { int o = __p.__offset(6); return o != 0 ? (Vec3f?)(new Vec3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Unk1 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Unk2 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Unk3 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint Unk4 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Titan.TrinityScene.trinity_CompoundPencilShape> Createtrinity_CompoundPencilShape(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Vec3fT unk0 = null,
      float unk1 = 0.0f,
      float unk2 = 0.0f,
      float unk3 = 0.0f,
      uint unk4 = 0) {
    builder.StartTable(6);
    trinity_CompoundPencilShape.AddUnk4(builder, unk4);
    trinity_CompoundPencilShape.AddUnk3(builder, unk3);
    trinity_CompoundPencilShape.AddUnk2(builder, unk2);
    trinity_CompoundPencilShape.AddUnk1(builder, unk1);
    trinity_CompoundPencilShape.AddUnk0(builder, Vec3f.Pack(builder, unk0));
    trinity_CompoundPencilShape.AddName(builder, nameOffset);
    return trinity_CompoundPencilShape.Endtrinity_CompoundPencilShape(builder);
  }

  public static void Starttrinity_CompoundPencilShape(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddUnk0(FlatBufferBuilder builder, Offset<Vec3f> unk0Offset) { builder.AddStruct(1, unk0Offset.Value, 0); }
  public static void AddUnk1(FlatBufferBuilder builder, float unk1) { builder.AddFloat(2, unk1, 0.0f); }
  public static void AddUnk2(FlatBufferBuilder builder, float unk2) { builder.AddFloat(3, unk2, 0.0f); }
  public static void AddUnk3(FlatBufferBuilder builder, float unk3) { builder.AddFloat(4, unk3, 0.0f); }
  public static void AddUnk4(FlatBufferBuilder builder, uint unk4) { builder.AddUint(5, unk4, 0); }
  public static Offset<Titan.TrinityScene.trinity_CompoundPencilShape> Endtrinity_CompoundPencilShape(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.trinity_CompoundPencilShape>(o);
  }
  public static void Finishtrinity_CompoundPencilShapeBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_CompoundPencilShape> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedtrinity_CompoundPencilShapeBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_CompoundPencilShape> offset) { builder.FinishSizePrefixed(offset.Value); }
  public trinity_CompoundPencilShapeT UnPack() {
    var _o = new trinity_CompoundPencilShapeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(trinity_CompoundPencilShapeT _o) {
    _o.Name = this.Name;
    _o.Unk0 = this.Unk0.HasValue ? this.Unk0.Value.UnPack() : null;
    _o.Unk1 = this.Unk1;
    _o.Unk2 = this.Unk2;
    _o.Unk3 = this.Unk3;
    _o.Unk4 = this.Unk4;
  }
  public static Offset<Titan.TrinityScene.trinity_CompoundPencilShape> Pack(FlatBufferBuilder builder, trinity_CompoundPencilShapeT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.trinity_CompoundPencilShape>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return Createtrinity_CompoundPencilShape(
      builder,
      _name,
      _o.Unk0,
      _o.Unk1,
      _o.Unk2,
      _o.Unk3,
      _o.Unk4);
  }
}

public class trinity_CompoundPencilShapeT
{
  public string Name { get; set; }
  public Vec3fT Unk0 { get; set; }
  public float Unk1 { get; set; }
  public float Unk2 { get; set; }
  public float Unk3 { get; set; }
  public uint Unk4 { get; set; }

  public trinity_CompoundPencilShapeT() {
    this.Name = null;
    this.Unk0 = new Vec3fT();
    this.Unk1 = 0.0f;
    this.Unk2 = 0.0f;
    this.Unk3 = 0.0f;
    this.Unk4 = 0;
  }
  public static trinity_CompoundPencilShapeT DeserializeFromBinary(byte[] fbBuffer) {
    return trinity_CompoundPencilShape.GetRootAstrinity_CompoundPencilShape(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    trinity_CompoundPencilShape.Finishtrinity_CompoundPencilShapeBuffer(fbb, trinity_CompoundPencilShape.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
