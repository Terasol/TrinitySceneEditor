// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Titan.TrinityScene
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct trinity_SceneController : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static trinity_SceneController GetRootAstrinity_SceneController(ByteBuffer _bb) { return GetRootAstrinity_SceneController(_bb, new trinity_SceneController()); }
  public static trinity_SceneController GetRootAstrinity_SceneController(ByteBuffer _bb, trinity_SceneController obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public trinity_SceneController __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Unk0 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Unk1 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Unk2 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Unk3 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Titan.TrinityScene.trinity_SceneController> Createtrinity_SceneController(FlatBufferBuilder builder,
      float unk_0 = 0.0f,
      float unk_1 = 0.0f,
      float unk_2 = 0.0f,
      float unk_3 = 0.0f) {
    builder.StartTable(4);
    trinity_SceneController.AddUnk3(builder, unk_3);
    trinity_SceneController.AddUnk2(builder, unk_2);
    trinity_SceneController.AddUnk1(builder, unk_1);
    trinity_SceneController.AddUnk0(builder, unk_0);
    return trinity_SceneController.Endtrinity_SceneController(builder);
  }

  public static void Starttrinity_SceneController(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddUnk0(FlatBufferBuilder builder, float unk0) { builder.AddFloat(0, unk0, 0.0f); }
  public static void AddUnk1(FlatBufferBuilder builder, float unk1) { builder.AddFloat(1, unk1, 0.0f); }
  public static void AddUnk2(FlatBufferBuilder builder, float unk2) { builder.AddFloat(2, unk2, 0.0f); }
  public static void AddUnk3(FlatBufferBuilder builder, float unk3) { builder.AddFloat(3, unk3, 0.0f); }
  public static Offset<Titan.TrinityScene.trinity_SceneController> Endtrinity_SceneController(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.trinity_SceneController>(o);
  }
  public static void Finishtrinity_SceneControllerBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_SceneController> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedtrinity_SceneControllerBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_SceneController> offset) { builder.FinishSizePrefixed(offset.Value); }
  public trinity_SceneControllerT UnPack() {
    var _o = new trinity_SceneControllerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(trinity_SceneControllerT _o) {
    _o.Unk0 = this.Unk0;
    _o.Unk1 = this.Unk1;
    _o.Unk2 = this.Unk2;
    _o.Unk3 = this.Unk3;
  }
  public static Offset<Titan.TrinityScene.trinity_SceneController> Pack(FlatBufferBuilder builder, trinity_SceneControllerT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.trinity_SceneController>);
    return Createtrinity_SceneController(
      builder,
      _o.Unk0,
      _o.Unk1,
      _o.Unk2,
      _o.Unk3);
  }
}

public class trinity_SceneControllerT
{
  public float Unk0 { get; set; }
  public float Unk1 { get; set; }
  public float Unk2 { get; set; }
  public float Unk3 { get; set; }

  public trinity_SceneControllerT() {
    this.Unk0 = 0.0f;
    this.Unk1 = 0.0f;
    this.Unk2 = 0.0f;
    this.Unk3 = 0.0f;
  }
  public static trinity_SceneControllerT DeserializeFromBinary(byte[] fbBuffer) {
    return trinity_SceneController.GetRootAstrinity_SceneController(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    trinity_SceneController.Finishtrinity_SceneControllerBuffer(fbb, trinity_SceneController.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
