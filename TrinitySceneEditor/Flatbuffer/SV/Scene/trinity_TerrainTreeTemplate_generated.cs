// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Titan.TrinityScene
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct trinity_TerrainTreeTemplate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static trinity_TerrainTreeTemplate GetRootAstrinity_TerrainTreeTemplate(ByteBuffer _bb) { return GetRootAstrinity_TerrainTreeTemplate(_bb, new trinity_TerrainTreeTemplate()); }
  public static trinity_TerrainTreeTemplate GetRootAstrinity_TerrainTreeTemplate(ByteBuffer _bb, trinity_TerrainTreeTemplate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public trinity_TerrainTreeTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Unk0 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string TemplateFilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTemplateFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTemplateFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTemplateFilePathArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<Titan.TrinityScene.trinity_TerrainTreeTemplate> Createtrinity_TerrainTreeTemplate(FlatBufferBuilder builder,
      ulong unk_0 = 0,
      StringOffset template_file_pathOffset = default(StringOffset)) {
    builder.StartTable(2);
    trinity_TerrainTreeTemplate.AddUnk0(builder, unk_0);
    trinity_TerrainTreeTemplate.AddTemplateFilePath(builder, template_file_pathOffset);
    return trinity_TerrainTreeTemplate.Endtrinity_TerrainTreeTemplate(builder);
  }

  public static void Starttrinity_TerrainTreeTemplate(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddUnk0(FlatBufferBuilder builder, ulong unk0) { builder.AddUlong(0, unk0, 0); }
  public static void AddTemplateFilePath(FlatBufferBuilder builder, StringOffset templateFilePathOffset) { builder.AddOffset(1, templateFilePathOffset.Value, 0); }
  public static Offset<Titan.TrinityScene.trinity_TerrainTreeTemplate> Endtrinity_TerrainTreeTemplate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.trinity_TerrainTreeTemplate>(o);
  }
  public static void Finishtrinity_TerrainTreeTemplateBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_TerrainTreeTemplate> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedtrinity_TerrainTreeTemplateBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_TerrainTreeTemplate> offset) { builder.FinishSizePrefixed(offset.Value); }
  public trinity_TerrainTreeTemplateT UnPack() {
    var _o = new trinity_TerrainTreeTemplateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(trinity_TerrainTreeTemplateT _o) {
    _o.Unk0 = this.Unk0;
    _o.TemplateFilePath = this.TemplateFilePath;
  }
  public static Offset<Titan.TrinityScene.trinity_TerrainTreeTemplate> Pack(FlatBufferBuilder builder, trinity_TerrainTreeTemplateT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.trinity_TerrainTreeTemplate>);
    var _template_file_path = _o.TemplateFilePath == null ? default(StringOffset) : builder.CreateString(_o.TemplateFilePath);
    return Createtrinity_TerrainTreeTemplate(
      builder,
      _o.Unk0,
      _template_file_path);
  }
}

public class trinity_TerrainTreeTemplateT
{
  public ulong Unk0 { get; set; }
  public string TemplateFilePath { get; set; }

  public trinity_TerrainTreeTemplateT() {
    this.Unk0 = 0;
    this.TemplateFilePath = null;
  }
  public static trinity_TerrainTreeTemplateT DeserializeFromBinary(byte[] fbBuffer) {
    return trinity_TerrainTreeTemplate.GetRootAstrinity_TerrainTreeTemplate(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    trinity_TerrainTreeTemplate.Finishtrinity_TerrainTreeTemplateBuffer(fbb, trinity_TerrainTreeTemplate.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
