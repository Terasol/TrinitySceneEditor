// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Titan.TrinityScene
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct pe_TextComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static pe_TextComponent GetRootAspe_TextComponent(ByteBuffer _bb) { return GetRootAspe_TextComponent(_bb, new pe_TextComponent()); }
  public static pe_TextComponent GetRootAspe_TextComponent(ByteBuffer _bb, pe_TextComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public pe_TextComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Filepath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilepathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilepathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilepathArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Titan.TrinityScene.pe_TextComponent> Createpe_TextComponent(FlatBufferBuilder builder,
      StringOffset filepathOffset = default(StringOffset)) {
    builder.StartTable(1);
    pe_TextComponent.AddFilepath(builder, filepathOffset);
    return pe_TextComponent.Endpe_TextComponent(builder);
  }

  public static void Startpe_TextComponent(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFilepath(FlatBufferBuilder builder, StringOffset filepathOffset) { builder.AddOffset(0, filepathOffset.Value, 0); }
  public static Offset<Titan.TrinityScene.pe_TextComponent> Endpe_TextComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.pe_TextComponent>(o);
  }
  public static void Finishpe_TextComponentBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.pe_TextComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedpe_TextComponentBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.pe_TextComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public pe_TextComponentT UnPack() {
    var _o = new pe_TextComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(pe_TextComponentT _o) {
    _o.Filepath = this.Filepath;
  }
  public static Offset<Titan.TrinityScene.pe_TextComponent> Pack(FlatBufferBuilder builder, pe_TextComponentT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.pe_TextComponent>);
    var _filepath = _o.Filepath == null ? default(StringOffset) : builder.CreateString(_o.Filepath);
    return Createpe_TextComponent(
      builder,
      _filepath);
  }
}

public class pe_TextComponentT
{
  public string Filepath { get; set; }

  public pe_TextComponentT() {
    this.Filepath = null;
  }
  public static pe_TextComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return pe_TextComponent.GetRootAspe_TextComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    pe_TextComponent.Finishpe_TextComponentBuffer(fbb, pe_TextComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
