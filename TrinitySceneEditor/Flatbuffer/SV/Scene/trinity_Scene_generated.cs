// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Titan.TrinityScene
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SceneEntry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static SceneEntry GetRootAsSceneEntry(ByteBuffer _bb) { return GetRootAsSceneEntry(_bb, new SceneEntry()); }
  public static SceneEntry GetRootAsSceneEntry(ByteBuffer _bb, SceneEntry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SceneEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TypeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeNameArray() { return __p.__vector_as_array<byte>(4); }
  public byte NestedType(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int NestedTypeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNestedTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNestedTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNestedTypeArray() { return __p.__vector_as_array<byte>(6); }
  public Titan.TrinityScene.SceneEntry? SubObjects(int j) { int o = __p.__offset(8); return o != 0 ? (Titan.TrinityScene.SceneEntry?)(new Titan.TrinityScene.SceneEntry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubObjectsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Titan.TrinityScene.SceneEntry> CreateSceneEntry(FlatBufferBuilder builder,
      StringOffset type_nameOffset = default(StringOffset),
      VectorOffset nested_typeOffset = default(VectorOffset),
      VectorOffset sub_objectsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    SceneEntry.AddSubObjects(builder, sub_objectsOffset);
    SceneEntry.AddNestedType(builder, nested_typeOffset);
    SceneEntry.AddTypeName(builder, type_nameOffset);
    return SceneEntry.EndSceneEntry(builder);
  }

  public static void StartSceneEntry(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTypeName(FlatBufferBuilder builder, StringOffset typeNameOffset) { builder.AddOffset(0, typeNameOffset.Value, 0); }
  public static void AddNestedType(FlatBufferBuilder builder, VectorOffset nestedTypeOffset) { builder.AddOffset(1, nestedTypeOffset.Value, 0); }
  public static VectorOffset CreateNestedTypeVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNestedTypeVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNestedTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNestedTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNestedTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddSubObjects(FlatBufferBuilder builder, VectorOffset subObjectsOffset) { builder.AddOffset(2, subObjectsOffset.Value, 0); }
  public static VectorOffset CreateSubObjectsVector(FlatBufferBuilder builder, Offset<Titan.TrinityScene.SceneEntry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubObjectsVectorBlock(FlatBufferBuilder builder, Offset<Titan.TrinityScene.SceneEntry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubObjectsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Titan.TrinityScene.SceneEntry>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSubObjectsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Titan.TrinityScene.SceneEntry>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSubObjectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Titan.TrinityScene.SceneEntry> EndSceneEntry(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.SceneEntry>(o);
  }
  public SceneEntryT UnPack() {
    var _o = new SceneEntryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SceneEntryT _o) {
    _o.TypeName = this.TypeName;
    _o.NestedType = new List<byte>();
    for (var _j = 0; _j < this.NestedTypeLength; ++_j) {_o.NestedType.Add(this.NestedType(_j));}
    _o.SubObjects = new List<Titan.TrinityScene.SceneEntryT>();
    for (var _j = 0; _j < this.SubObjectsLength; ++_j) {_o.SubObjects.Add(this.SubObjects(_j).HasValue ? this.SubObjects(_j).Value.UnPack() : null);}
  }
  public static Offset<Titan.TrinityScene.SceneEntry> Pack(FlatBufferBuilder builder, SceneEntryT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.SceneEntry>);
    var _type_name = _o.TypeName == null ? default(StringOffset) : builder.CreateString(_o.TypeName);
    var _nested_type = default(VectorOffset);
    if (_o.NestedType != null) {
      var __nested_type = _o.NestedType.ToArray();
      _nested_type = CreateNestedTypeVector(builder, __nested_type);
    }
    var _sub_objects = default(VectorOffset);
    if (_o.SubObjects != null) {
      var __sub_objects = new Offset<Titan.TrinityScene.SceneEntry>[_o.SubObjects.Count];
      for (var _j = 0; _j < __sub_objects.Length; ++_j) { __sub_objects[_j] = Titan.TrinityScene.SceneEntry.Pack(builder, _o.SubObjects[_j]); }
      _sub_objects = CreateSubObjectsVector(builder, __sub_objects);
    }
    return CreateSceneEntry(
      builder,
      _type_name,
      _nested_type,
      _sub_objects);
  }
}

public class SceneEntryT
{
  public string TypeName { get; set; }
  public List<byte> NestedType { get; set; }
  public List<Titan.TrinityScene.SceneEntryT> SubObjects { get; set; }

  public SceneEntryT() {
    this.TypeName = null;
    this.NestedType = null;
    this.SubObjects = null;
  }
}

public struct trinity_Scene : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static trinity_Scene GetRootAstrinity_Scene(ByteBuffer _bb) { return GetRootAstrinity_Scene(_bb, new trinity_Scene()); }
  public static trinity_Scene GetRootAstrinity_Scene(ByteBuffer _bb, trinity_Scene obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public trinity_Scene __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string SceneName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSceneNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetSceneNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSceneNameArray() { return __p.__vector_as_array<byte>(4); }
  public string SceneExtra { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSceneExtraBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSceneExtraBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSceneExtraArray() { return __p.__vector_as_array<byte>(6); }
  public uint Res2 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Res3 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Titan.TrinityScene.SceneEntry? SceneObjectList(int j) { int o = __p.__offset(12); return o != 0 ? (Titan.TrinityScene.SceneEntry?)(new Titan.TrinityScene.SceneEntry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SceneObjectListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Res5(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int Res5Length { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public byte Unk6 { get { int o = __p.__offset(16); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<Titan.TrinityScene.trinity_Scene> Createtrinity_Scene(FlatBufferBuilder builder,
      StringOffset scene_nameOffset = default(StringOffset),
      StringOffset scene_extraOffset = default(StringOffset),
      uint res_2 = 0,
      uint res_3 = 0,
      VectorOffset scene_object_listOffset = default(VectorOffset),
      VectorOffset res_5Offset = default(VectorOffset),
      byte unk_6 = 0) {
    builder.StartTable(7);
    trinity_Scene.AddRes5(builder, res_5Offset);
    trinity_Scene.AddSceneObjectList(builder, scene_object_listOffset);
    trinity_Scene.AddRes3(builder, res_3);
    trinity_Scene.AddRes2(builder, res_2);
    trinity_Scene.AddSceneExtra(builder, scene_extraOffset);
    trinity_Scene.AddSceneName(builder, scene_nameOffset);
    trinity_Scene.AddUnk6(builder, unk_6);
    return trinity_Scene.Endtrinity_Scene(builder);
  }

  public static void Starttrinity_Scene(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddSceneName(FlatBufferBuilder builder, StringOffset sceneNameOffset) { builder.AddOffset(0, sceneNameOffset.Value, 0); }
  public static void AddSceneExtra(FlatBufferBuilder builder, StringOffset sceneExtraOffset) { builder.AddOffset(1, sceneExtraOffset.Value, 0); }
  public static void AddRes2(FlatBufferBuilder builder, uint res2) { builder.AddUint(2, res2, 0); }
  public static void AddRes3(FlatBufferBuilder builder, uint res3) { builder.AddUint(3, res3, 0); }
  public static void AddSceneObjectList(FlatBufferBuilder builder, VectorOffset sceneObjectListOffset) { builder.AddOffset(4, sceneObjectListOffset.Value, 0); }
  public static VectorOffset CreateSceneObjectListVector(FlatBufferBuilder builder, Offset<Titan.TrinityScene.SceneEntry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSceneObjectListVectorBlock(FlatBufferBuilder builder, Offset<Titan.TrinityScene.SceneEntry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSceneObjectListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Titan.TrinityScene.SceneEntry>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSceneObjectListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Titan.TrinityScene.SceneEntry>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSceneObjectListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRes5(FlatBufferBuilder builder, VectorOffset res5Offset) { builder.AddOffset(5, res5Offset.Value, 0); }
  public static VectorOffset CreateRes5Vector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRes5VectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRes5VectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRes5VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRes5Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnk6(FlatBufferBuilder builder, byte unk6) { builder.AddByte(6, unk6, 0); }
  public static Offset<Titan.TrinityScene.trinity_Scene> Endtrinity_Scene(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.trinity_Scene>(o);
  }
  public static void Finishtrinity_SceneBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_Scene> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedtrinity_SceneBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_Scene> offset) { builder.FinishSizePrefixed(offset.Value); }
  public trinity_SceneT UnPack() {
    var _o = new trinity_SceneT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(trinity_SceneT _o) {
    _o.SceneName = this.SceneName;
    _o.SceneExtra = this.SceneExtra;
    _o.Res2 = this.Res2;
    _o.Res3 = this.Res3;
    _o.SceneObjectList = new List<Titan.TrinityScene.SceneEntryT>();
    for (var _j = 0; _j < this.SceneObjectListLength; ++_j) {_o.SceneObjectList.Add(this.SceneObjectList(_j).HasValue ? this.SceneObjectList(_j).Value.UnPack() : null);}
    _o.Res5 = new List<string>();
    for (var _j = 0; _j < this.Res5Length; ++_j) {_o.Res5.Add(this.Res5(_j));}
    _o.Unk6 = this.Unk6;
  }
  public static Offset<Titan.TrinityScene.trinity_Scene> Pack(FlatBufferBuilder builder, trinity_SceneT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.trinity_Scene>);
    var _scene_name = _o.SceneName == null ? default(StringOffset) : builder.CreateString(_o.SceneName);
    var _scene_extra = _o.SceneExtra == null ? default(StringOffset) : builder.CreateString(_o.SceneExtra);
    var _scene_object_list = default(VectorOffset);
    if (_o.SceneObjectList != null) {
      var __scene_object_list = new Offset<Titan.TrinityScene.SceneEntry>[_o.SceneObjectList.Count];
      for (var _j = 0; _j < __scene_object_list.Length; ++_j) { __scene_object_list[_j] = Titan.TrinityScene.SceneEntry.Pack(builder, _o.SceneObjectList[_j]); }
      _scene_object_list = CreateSceneObjectListVector(builder, __scene_object_list);
    }
    var _res_5 = default(VectorOffset);
    if (_o.Res5 != null) {
      var __res_5 = new StringOffset[_o.Res5.Count];
      for (var _j = 0; _j < __res_5.Length; ++_j) { __res_5[_j] = builder.CreateString(_o.Res5[_j]); }
      _res_5 = CreateRes5Vector(builder, __res_5);
    }
    return Createtrinity_Scene(
      builder,
      _scene_name,
      _scene_extra,
      _o.Res2,
      _o.Res3,
      _scene_object_list,
      _res_5,
      _o.Unk6);
  }
}

public class trinity_SceneT
{
  public string SceneName { get; set; }
  public string SceneExtra { get; set; }
  public uint Res2 { get; set; }
  public uint Res3 { get; set; }
  public List<Titan.TrinityScene.SceneEntryT> SceneObjectList { get; set; }
  public List<string> Res5 { get; set; }
  public byte Unk6 { get; set; }

  public trinity_SceneT() {
    this.SceneName = null;
    this.SceneExtra = null;
    this.Res2 = 0;
    this.Res3 = 0;
    this.SceneObjectList = null;
    this.Res5 = null;
    this.Unk6 = 0;
  }
  public static trinity_SceneT DeserializeFromBinary(byte[] fbBuffer) {
    return trinity_Scene.GetRootAstrinity_Scene(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    trinity_Scene.Finishtrinity_SceneBuffer(fbb, trinity_Scene.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
