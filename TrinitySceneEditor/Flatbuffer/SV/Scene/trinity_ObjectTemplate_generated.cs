// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Titan.TrinityScene
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct trinity_ObjectTemplate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static trinity_ObjectTemplate GetRootAstrinity_ObjectTemplate(ByteBuffer _bb) { return GetRootAstrinity_ObjectTemplate(_bb, new trinity_ObjectTemplate()); }
  public static trinity_ObjectTemplate GetRootAstrinity_ObjectTemplate(ByteBuffer _bb, trinity_ObjectTemplate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public trinity_ObjectTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ObjectName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetObjectNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetObjectNameArray() { return __p.__vector_as_array<byte>(4); }
  public string TemplateName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTemplateNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTemplateNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTemplateNameArray() { return __p.__vector_as_array<byte>(6); }
  public string FilePath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(8); }
  public bool Unk3 { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ObjectType { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectTypeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetObjectTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetObjectTypeArray() { return __p.__vector_as_array<byte>(12); }
  public byte ObjectBytes(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ObjectBytesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectBytesBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetObjectBytesBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetObjectBytesArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<Titan.TrinityScene.trinity_ObjectTemplate> Createtrinity_ObjectTemplate(FlatBufferBuilder builder,
      StringOffset object_nameOffset = default(StringOffset),
      StringOffset template_nameOffset = default(StringOffset),
      StringOffset file_pathOffset = default(StringOffset),
      bool unk_3 = false,
      StringOffset object_typeOffset = default(StringOffset),
      VectorOffset object_bytesOffset = default(VectorOffset)) {
    builder.StartTable(6);
    trinity_ObjectTemplate.AddObjectBytes(builder, object_bytesOffset);
    trinity_ObjectTemplate.AddObjectType(builder, object_typeOffset);
    trinity_ObjectTemplate.AddFilePath(builder, file_pathOffset);
    trinity_ObjectTemplate.AddTemplateName(builder, template_nameOffset);
    trinity_ObjectTemplate.AddObjectName(builder, object_nameOffset);
    trinity_ObjectTemplate.AddUnk3(builder, unk_3);
    return trinity_ObjectTemplate.Endtrinity_ObjectTemplate(builder);
  }

  public static void Starttrinity_ObjectTemplate(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddObjectName(FlatBufferBuilder builder, StringOffset objectNameOffset) { builder.AddOffset(0, objectNameOffset.Value, 0); }
  public static void AddTemplateName(FlatBufferBuilder builder, StringOffset templateNameOffset) { builder.AddOffset(1, templateNameOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(2, filePathOffset.Value, 0); }
  public static void AddUnk3(FlatBufferBuilder builder, bool unk3) { builder.AddBool(3, unk3, false); }
  public static void AddObjectType(FlatBufferBuilder builder, StringOffset objectTypeOffset) { builder.AddOffset(4, objectTypeOffset.Value, 0); }
  public static void AddObjectBytes(FlatBufferBuilder builder, VectorOffset objectBytesOffset) { builder.AddOffset(5, objectBytesOffset.Value, 0); }
  public static VectorOffset CreateObjectBytesVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateObjectBytesVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectBytesVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectBytesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObjectBytesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Titan.TrinityScene.trinity_ObjectTemplate> Endtrinity_ObjectTemplate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.trinity_ObjectTemplate>(o);
  }
  public static void Finishtrinity_ObjectTemplateBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_ObjectTemplate> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedtrinity_ObjectTemplateBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_ObjectTemplate> offset) { builder.FinishSizePrefixed(offset.Value); }
  public trinity_ObjectTemplateT UnPack() {
    var _o = new trinity_ObjectTemplateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(trinity_ObjectTemplateT _o) {
    _o.ObjectName = this.ObjectName;
    _o.TemplateName = this.TemplateName;
    _o.FilePath = this.FilePath;
    _o.Unk3 = this.Unk3;
    _o.ObjectType = this.ObjectType;
    _o.ObjectBytes = new List<byte>();
    for (var _j = 0; _j < this.ObjectBytesLength; ++_j) {_o.ObjectBytes.Add(this.ObjectBytes(_j));}
  }
  public static Offset<Titan.TrinityScene.trinity_ObjectTemplate> Pack(FlatBufferBuilder builder, trinity_ObjectTemplateT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.trinity_ObjectTemplate>);
    var _object_name = _o.ObjectName == null ? default(StringOffset) : builder.CreateString(_o.ObjectName);
    var _template_name = _o.TemplateName == null ? default(StringOffset) : builder.CreateString(_o.TemplateName);
    var _file_path = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _object_type = _o.ObjectType == null ? default(StringOffset) : builder.CreateString(_o.ObjectType);
    var _object_bytes = default(VectorOffset);
    if (_o.ObjectBytes != null) {
      var __object_bytes = _o.ObjectBytes.ToArray();
      _object_bytes = CreateObjectBytesVector(builder, __object_bytes);
    }
    return Createtrinity_ObjectTemplate(
      builder,
      _object_name,
      _template_name,
      _file_path,
      _o.Unk3,
      _object_type,
      _object_bytes);
  }
}

public class trinity_ObjectTemplateT
{
  public string ObjectName { get; set; }
  public string TemplateName { get; set; }
  public string FilePath { get; set; }
  public bool Unk3 { get; set; }
  public string ObjectType { get; set; }
  public List<byte> ObjectBytes { get; set; }

  public trinity_ObjectTemplateT() {
    this.ObjectName = null;
    this.TemplateName = null;
    this.FilePath = null;
    this.Unk3 = false;
    this.ObjectType = null;
    this.ObjectBytes = null;
  }
  public static trinity_ObjectTemplateT DeserializeFromBinary(byte[] fbBuffer) {
    return trinity_ObjectTemplate.GetRootAstrinity_ObjectTemplate(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    trinity_ObjectTemplate.Finishtrinity_ObjectTemplateBuffer(fbb, trinity_ObjectTemplate.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
