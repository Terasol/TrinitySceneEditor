// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Titan.TrinityScene
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct pe_SimpleNode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static pe_SimpleNode GetRootAspe_SimpleNode(ByteBuffer _bb) { return GetRootAspe_SimpleNode(_bb, new pe_SimpleNode()); }
  public static pe_SimpleNode GetRootAspe_SimpleNode(ByteBuffer _bb, pe_SimpleNode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public pe_SimpleNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Unk0 { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnk0Bytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUnk0Bytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUnk0Array() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Titan.TrinityScene.pe_SimpleNode> Createpe_SimpleNode(FlatBufferBuilder builder,
      StringOffset unk_0Offset = default(StringOffset)) {
    builder.StartTable(1);
    pe_SimpleNode.AddUnk0(builder, unk_0Offset);
    return pe_SimpleNode.Endpe_SimpleNode(builder);
  }

  public static void Startpe_SimpleNode(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddUnk0(FlatBufferBuilder builder, StringOffset unk0Offset) { builder.AddOffset(0, unk0Offset.Value, 0); }
  public static Offset<Titan.TrinityScene.pe_SimpleNode> Endpe_SimpleNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.pe_SimpleNode>(o);
  }
  public static void Finishpe_SimpleNodeBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.pe_SimpleNode> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedpe_SimpleNodeBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.pe_SimpleNode> offset) { builder.FinishSizePrefixed(offset.Value); }
  public pe_SimpleNodeT UnPack() {
    var _o = new pe_SimpleNodeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(pe_SimpleNodeT _o) {
    _o.Unk0 = this.Unk0;
  }
  public static Offset<Titan.TrinityScene.pe_SimpleNode> Pack(FlatBufferBuilder builder, pe_SimpleNodeT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.pe_SimpleNode>);
    var _unk_0 = _o.Unk0 == null ? default(StringOffset) : builder.CreateString(_o.Unk0);
    return Createpe_SimpleNode(
      builder,
      _unk_0);
  }
}

public class pe_SimpleNodeT
{
  public string Unk0 { get; set; }

  public pe_SimpleNodeT() {
    this.Unk0 = null;
  }
  public static pe_SimpleNodeT DeserializeFromBinary(byte[] fbBuffer) {
    return pe_SimpleNode.GetRootAspe_SimpleNode(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    pe_SimpleNode.Finishpe_SimpleNodeBuffer(fbb, pe_SimpleNode.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
