// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Vec3f : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec3f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<Vec3f> CreateVec3f(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<Vec3f>(builder.Offset);
  }
  public Vec3fT UnPack() {
    var _o = new Vec3fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vec3fT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<Vec3f> Pack(FlatBufferBuilder builder, Vec3fT _o) {
    if (_o == null) return default(Offset<Vec3f>);
    return CreateVec3f(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
}

public class Vec3fT
{
  public float X { get; set; }
  public float Y { get; set; }
  public float Z { get; set; }

  public Vec3fT() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct Vec4f : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec4f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float W { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }

  public static Offset<Vec4f> CreateVec4f(FlatBufferBuilder builder, float X, float Y, float Z, float W) {
    builder.Prep(4, 16);
    builder.PutFloat(W);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<Vec4f>(builder.Offset);
  }
  public Vec4fT UnPack() {
    var _o = new Vec4fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vec4fT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
    _o.W = this.W;
  }
  public static Offset<Vec4f> Pack(FlatBufferBuilder builder, Vec4fT _o) {
    if (_o == null) return default(Offset<Vec4f>);
    return CreateVec4f(
      builder,
      _o.X,
      _o.Y,
      _o.Z,
      _o.W);
  }
}

public class Vec4fT
{
  public float X { get; set; }
  public float Y { get; set; }
  public float Z { get; set; }
  public float W { get; set; }

  public Vec4fT() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
    this.W = 0.0f;
  }
}

public struct SRT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static SRT GetRootAsSRT(ByteBuffer _bb) { return GetRootAsSRT(_bb, new SRT()); }
  public static SRT GetRootAsSRT(ByteBuffer _bb, SRT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SRT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vec3f? Scale { get { int o = __p.__offset(4); return o != 0 ? (Vec3f?)(new Vec3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vec3f? Rotation { get { int o = __p.__offset(6); return o != 0 ? (Vec3f?)(new Vec3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vec3f? Translation { get { int o = __p.__offset(8); return o != 0 ? (Vec3f?)(new Vec3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartSRT(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddScale(FlatBufferBuilder builder, Offset<Vec3f> scaleOffset) { builder.AddStruct(0, scaleOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<Vec3f> rotationOffset) { builder.AddStruct(1, rotationOffset.Value, 0); }
  public static void AddTranslation(FlatBufferBuilder builder, Offset<Vec3f> translationOffset) { builder.AddStruct(2, translationOffset.Value, 0); }
  public static Offset<SRT> EndSRT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SRT>(o);
  }
  public SRTT UnPack() {
    var _o = new SRTT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SRTT _o) {
    _o.Scale = this.Scale.HasValue ? this.Scale.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Translation = this.Translation.HasValue ? this.Translation.Value.UnPack() : null;
  }
  public static Offset<SRT> Pack(FlatBufferBuilder builder, SRTT _o) {
    if (_o == null) return default(Offset<SRT>);
    StartSRT(builder);
    AddScale(builder, Vec3f.Pack(builder, _o.Scale));
    AddRotation(builder, Vec3f.Pack(builder, _o.Rotation));
    AddTranslation(builder, Vec3f.Pack(builder, _o.Translation));
    return EndSRT(builder);
  }
}

public class SRTT
{
  public Vec3fT Scale { get; set; }
  public Vec3fT Rotation { get; set; }
  public Vec3fT Translation { get; set; }

  public SRTT() {
    this.Scale = new Vec3fT();
    this.Rotation = new Vec3fT();
    this.Translation = new Vec3fT();
  }
}

