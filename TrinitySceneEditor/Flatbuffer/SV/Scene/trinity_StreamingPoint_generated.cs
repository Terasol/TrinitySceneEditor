// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Titan.TrinityScene
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SP_Object : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static SP_Object GetRootAsSP_Object(ByteBuffer _bb) { return GetRootAsSP_Object(_bb, new SP_Object()); }
  public static SP_Object GetRootAsSP_Object(ByteBuffer _bb, SP_Object obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SP_Object __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public byte NestedType(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int NestedTypeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNestedTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNestedTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNestedTypeArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<Titan.TrinityScene.SP_Object> CreateSP_Object(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset nested_typeOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SP_Object.AddNestedType(builder, nested_typeOffset);
    SP_Object.AddName(builder, nameOffset);
    return SP_Object.EndSP_Object(builder);
  }

  public static void StartSP_Object(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddNestedType(FlatBufferBuilder builder, VectorOffset nestedTypeOffset) { builder.AddOffset(1, nestedTypeOffset.Value, 0); }
  public static VectorOffset CreateNestedTypeVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNestedTypeVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNestedTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNestedTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNestedTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Titan.TrinityScene.SP_Object> EndSP_Object(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.SP_Object>(o);
  }
  public SP_ObjectT UnPack() {
    var _o = new SP_ObjectT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SP_ObjectT _o) {
    _o.Name = this.Name;
    _o.NestedType = new List<byte>();
    for (var _j = 0; _j < this.NestedTypeLength; ++_j) {_o.NestedType.Add(this.NestedType(_j));}
  }
  public static Offset<Titan.TrinityScene.SP_Object> Pack(FlatBufferBuilder builder, SP_ObjectT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.SP_Object>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _nested_type = default(VectorOffset);
    if (_o.NestedType != null) {
      var __nested_type = _o.NestedType.ToArray();
      _nested_type = CreateNestedTypeVector(builder, __nested_type);
    }
    return CreateSP_Object(
      builder,
      _name,
      _nested_type);
  }
}

public class SP_ObjectT
{
  public string Name { get; set; }
  public List<byte> NestedType { get; set; }

  public SP_ObjectT() {
    this.Name = null;
    this.NestedType = null;
  }
}

public struct SP_Point : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static SP_Point GetRootAsSP_Point(ByteBuffer _bb) { return GetRootAsSP_Point(_bb, new SP_Point()); }
  public static SP_Point GetRootAsSP_Point(ByteBuffer _bb, SP_Point obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SP_Point __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public Vec3f? Position { get { int o = __p.__offset(6); return o != 0 ? (Vec3f?)(new Vec3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<Titan.TrinityScene.SP_Point> CreateSP_Point(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Vec3fT position = null) {
    builder.StartTable(2);
    SP_Point.AddPosition(builder, Vec3f.Pack(builder, position));
    SP_Point.AddName(builder, nameOffset);
    return SP_Point.EndSP_Point(builder);
  }

  public static void StartSP_Point(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vec3f> positionOffset) { builder.AddStruct(1, positionOffset.Value, 0); }
  public static Offset<Titan.TrinityScene.SP_Point> EndSP_Point(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.SP_Point>(o);
  }
  public SP_PointT UnPack() {
    var _o = new SP_PointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SP_PointT _o) {
    _o.Name = this.Name;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
  }
  public static Offset<Titan.TrinityScene.SP_Point> Pack(FlatBufferBuilder builder, SP_PointT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.SP_Point>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateSP_Point(
      builder,
      _name,
      _o.Position);
  }
}

public class SP_PointT
{
  public string Name { get; set; }
  public Vec3fT Position { get; set; }

  public SP_PointT() {
    this.Name = null;
    this.Position = new Vec3fT();
  }
}

public struct SP_Entry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static SP_Entry GetRootAsSP_Entry(ByteBuffer _bb) { return GetRootAsSP_Entry(_bb, new SP_Entry()); }
  public static SP_Entry GetRootAsSP_Entry(ByteBuffer _bb, SP_Entry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SP_Entry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Titan.TrinityScene.SP_Point? Point { get { int o = __p.__offset(4); return o != 0 ? (Titan.TrinityScene.SP_Point?)(new Titan.TrinityScene.SP_Point()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Titan.TrinityScene.SP_Object? Objects(int j) { int o = __p.__offset(6); return o != 0 ? (Titan.TrinityScene.SP_Object?)(new Titan.TrinityScene.SP_Object()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObjectsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Titan.TrinityScene.SP_Entry> CreateSP_Entry(FlatBufferBuilder builder,
      Offset<Titan.TrinityScene.SP_Point> pointOffset = default(Offset<Titan.TrinityScene.SP_Point>),
      VectorOffset objectsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SP_Entry.AddObjects(builder, objectsOffset);
    SP_Entry.AddPoint(builder, pointOffset);
    return SP_Entry.EndSP_Entry(builder);
  }

  public static void StartSP_Entry(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPoint(FlatBufferBuilder builder, Offset<Titan.TrinityScene.SP_Point> pointOffset) { builder.AddOffset(0, pointOffset.Value, 0); }
  public static void AddObjects(FlatBufferBuilder builder, VectorOffset objectsOffset) { builder.AddOffset(1, objectsOffset.Value, 0); }
  public static VectorOffset CreateObjectsVector(FlatBufferBuilder builder, Offset<Titan.TrinityScene.SP_Object>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, Offset<Titan.TrinityScene.SP_Object>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Titan.TrinityScene.SP_Object>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Titan.TrinityScene.SP_Object>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObjectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Titan.TrinityScene.SP_Entry> EndSP_Entry(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.SP_Entry>(o);
  }
  public SP_EntryT UnPack() {
    var _o = new SP_EntryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SP_EntryT _o) {
    _o.Point = this.Point.HasValue ? this.Point.Value.UnPack() : null;
    _o.Objects = new List<Titan.TrinityScene.SP_ObjectT>();
    for (var _j = 0; _j < this.ObjectsLength; ++_j) {_o.Objects.Add(this.Objects(_j).HasValue ? this.Objects(_j).Value.UnPack() : null);}
  }
  public static Offset<Titan.TrinityScene.SP_Entry> Pack(FlatBufferBuilder builder, SP_EntryT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.SP_Entry>);
    var _point = _o.Point == null ? default(Offset<Titan.TrinityScene.SP_Point>) : Titan.TrinityScene.SP_Point.Pack(builder, _o.Point);
    var _objects = default(VectorOffset);
    if (_o.Objects != null) {
      var __objects = new Offset<Titan.TrinityScene.SP_Object>[_o.Objects.Count];
      for (var _j = 0; _j < __objects.Length; ++_j) { __objects[_j] = Titan.TrinityScene.SP_Object.Pack(builder, _o.Objects[_j]); }
      _objects = CreateObjectsVector(builder, __objects);
    }
    return CreateSP_Entry(
      builder,
      _point,
      _objects);
  }
}

public class SP_EntryT
{
  public Titan.TrinityScene.SP_PointT Point { get; set; }
  public List<Titan.TrinityScene.SP_ObjectT> Objects { get; set; }

  public SP_EntryT() {
    this.Point = null;
    this.Objects = null;
  }
}

public struct trinity_StreamingPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static trinity_StreamingPoint GetRootAstrinity_StreamingPoint(ByteBuffer _bb) { return GetRootAstrinity_StreamingPoint(_bb, new trinity_StreamingPoint()); }
  public static trinity_StreamingPoint GetRootAstrinity_StreamingPoint(ByteBuffer _bb, trinity_StreamingPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public trinity_StreamingPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Titan.TrinityScene.SP_Entry? Entries(int j) { int o = __p.__offset(4); return o != 0 ? (Titan.TrinityScene.SP_Entry?)(new Titan.TrinityScene.SP_Entry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EntriesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Titan.TrinityScene.trinity_StreamingPoint> Createtrinity_StreamingPoint(FlatBufferBuilder builder,
      VectorOffset entriesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    trinity_StreamingPoint.AddEntries(builder, entriesOffset);
    return trinity_StreamingPoint.Endtrinity_StreamingPoint(builder);
  }

  public static void Starttrinity_StreamingPoint(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddEntries(FlatBufferBuilder builder, VectorOffset entriesOffset) { builder.AddOffset(0, entriesOffset.Value, 0); }
  public static VectorOffset CreateEntriesVector(FlatBufferBuilder builder, Offset<Titan.TrinityScene.SP_Entry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEntriesVectorBlock(FlatBufferBuilder builder, Offset<Titan.TrinityScene.SP_Entry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEntriesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Titan.TrinityScene.SP_Entry>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEntriesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Titan.TrinityScene.SP_Entry>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEntriesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Titan.TrinityScene.trinity_StreamingPoint> Endtrinity_StreamingPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Titan.TrinityScene.trinity_StreamingPoint>(o);
  }
  public static void Finishtrinity_StreamingPointBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_StreamingPoint> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedtrinity_StreamingPointBuffer(FlatBufferBuilder builder, Offset<Titan.TrinityScene.trinity_StreamingPoint> offset) { builder.FinishSizePrefixed(offset.Value); }
  public trinity_StreamingPointT UnPack() {
    var _o = new trinity_StreamingPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(trinity_StreamingPointT _o) {
    _o.Entries = new List<Titan.TrinityScene.SP_EntryT>();
    for (var _j = 0; _j < this.EntriesLength; ++_j) {_o.Entries.Add(this.Entries(_j).HasValue ? this.Entries(_j).Value.UnPack() : null);}
  }
  public static Offset<Titan.TrinityScene.trinity_StreamingPoint> Pack(FlatBufferBuilder builder, trinity_StreamingPointT _o) {
    if (_o == null) return default(Offset<Titan.TrinityScene.trinity_StreamingPoint>);
    var _entries = default(VectorOffset);
    if (_o.Entries != null) {
      var __entries = new Offset<Titan.TrinityScene.SP_Entry>[_o.Entries.Count];
      for (var _j = 0; _j < __entries.Length; ++_j) { __entries[_j] = Titan.TrinityScene.SP_Entry.Pack(builder, _o.Entries[_j]); }
      _entries = CreateEntriesVector(builder, __entries);
    }
    return Createtrinity_StreamingPoint(
      builder,
      _entries);
  }
}

public class trinity_StreamingPointT
{
  public List<Titan.TrinityScene.SP_EntryT> Entries { get; set; }

  public trinity_StreamingPointT() {
    this.Entries = null;
  }
  public static trinity_StreamingPointT DeserializeFromBinary(byte[] fbBuffer) {
    return trinity_StreamingPoint.GetRootAstrinity_StreamingPoint(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    trinity_StreamingPoint.Finishtrinity_StreamingPointBuffer(fbb, trinity_StreamingPoint.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
